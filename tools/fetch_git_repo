#!/usr/bin/env python

from __future__ import with_statement
import os
import sys
import subprocess
import contextlib
import argparse

from pkgutils import sh_cmd

root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


@contextlib.contextmanager
def chdir(dirname=None):
    curdir = os.getcwd()
    try:
        if dirname is not None:
            os.chdir(dirname)
        yield
    finally:
        os.chdir(curdir)


def git_clone(source):
    sh_cmd("git clone %s ." % (source))


def get_update_existing(source):
    sh_cmd("git remote set-url origin %s" % (source))
    sh_cmd("git clean -d -f -x")
    sh_cmd("git fetch origin")
    sh_cmd("git checkout origin/master")
    sh_cmd("git submodule update --init --recursive")


def is_git_repo(dest):
    try:
        with chdir(dest):
            print(f"cd '{dest}'")
            cmd = "git rev-parse HEAD"
            print(cmd)
            rv = subprocess.call(cmd, shell=True)
            if rv == 0:
                return True
    except OSError:
        pass
    return False


def ensure_dir(d):
    if not os.path.exists(d):
        os.makedirs(d)

if __name__ == "__main__":
    usage = "usage: %prog [source-uri] [destination path]"
    PARSER = argparse.ArgumentParser(description='To fetch the git repo', usage=usage)
    PARSER.add_argument("source", help="source uri of git repo")
    PARSER.add_argument("destination", help="destination path where to extract git repo")
    ARGS = PARSER.parse_args()

    source = ARGS.source
    dest = ARGS.destination

    if is_git_repo(dest):
        with chdir(dest):
            print(f"cd '{dest}'")
            get_update_existing(source)
    else:
        ensure_dir(dest)
        with chdir(dest):
            print(f"cd '{dest}'")
            git_clone(source)
